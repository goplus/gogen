/*
 Copyright 2021 The GoPlus Authors (goplus.org)
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// +build ignore

package _

import (
	"math/big"
)

// -----------------------------------------------------------------------------
// type bigint

// A bigint represents a signed multi-precision integer.
// The zero value for a bigint represents nil.
type bigint struct {
	*big.Int
}

func (a bigint) + (b bigint) bigint
func (a bigint) - (b bigint) bigint
func (a bigint) * (b bigint) bigint
func (a bigint) / (b bigint) bigint
func (a bigint) % (b bigint) bigint

func (a bigint) | (b bigint) bigint
func (a bigint) ^ (b bigint) bigint
func (a bigint) & (b bigint) bigint
func (a bigint) &^ (b bigint) bigint

func (a bigint) << (n untyped_uint) bigint
func (a bigint) >> (n untyped_uint) bigint
func (a bigint) < (b bigint) bool
func (a bigint) <= (b bigint) bool
func (a bigint) > (b bigint) bool
func (a bigint) >= (b bigint) bool
func (a bigint) == (b bigint) bool
func (a bigint) != (b bigint) bool

func +(a bigint) bigint
func -(a bigint) bigint
func ^(a bigint) bigint

func (a bigint) += (b bigint)
func (a bigint) -= (b bigint)
func (a bigint) *= (b bigint)
func (a bigint) /= (b bigint)
func (a bigint) %= (b bigint)

func (a bigint) |= (b bigint)
func (a bigint) ^= (b bigint)
func (a bigint) &= (b bigint)
func (a bigint) &^= (b bigint)

func (a bigint) <<= (n untyped_uint)
func (a bigint) >>= (n untyped_uint)

func bigint() bigint
func bigint(x int64) bigint

// -----------------------------------------------------------------------------
// type bigrat

// A bigrat represents a quotient a/b of arbitrary precision.
// The zero value for a bigrat represents nil.
type bigrat struct {
	*big.Rat
}

func (a bigrat) + (b bigrat) bigrat
func (a bigrat) - (b bigrat) bigrat
func (a bigrat) * (b bigrat) bigrat
func (a bigrat) / (b bigrat) bigrat

func (a bigrat) < (b bigrat) bool
func (a bigrat) <= (b bigrat) bool
func (a bigrat) > (b bigrat) bool
func (a bigrat) >= (b bigrat) bool
func (a bigrat) == (b bigrat) bool
func (a bigrat) != (b bigrat) bool

func +(a bigrat) bigrat
func -(a bigrat) bigrat
func /(a bigrat) bigrat

func (a bigrat) += (b bigrat)
func (a bigrat) -= (b bigrat)
func (a bigrat) *= (b bigrat)
func (a bigrat) /= (b bigrat)

func bigrat() bigrat
func bigrat(a bigint) bigrat
func bigrat(a, b int64) bigrat

// -----------------------------------------------------------------------------
// type bigfloat

// A bigfloat represents a multi-precision floating point number.
// The zero value for a bigfloat represents nil.
type bigfloat struct {
	*big.Float
}

// -----------------------------------------------------------------------------
